// Generated by gencpp from file flyinglightspeck/Header.msg
// DO NOT EDIT!


#ifndef FLYINGLIGHTSPECK_MESSAGE_HEADER_H
#define FLYINGLIGHTSPECK_MESSAGE_HEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flyinglightspeck
{
template <class ContainerAllocator>
struct Header_
{
  typedef Header_<ContainerAllocator> Type;

  Header_()
    : id(0)
    , coordinate()
    , color()
    , duration()  {
      coordinate.assign(0.0);

      color.assign(0);
  }
  Header_(const ContainerAllocator& _alloc)
    : id(0)
    , coordinate()
    , color()
    , duration()  {
  (void)_alloc;
      coordinate.assign(0.0);

      color.assign(0);
  }



   typedef uint32_t _id_type;
  _id_type id;

   typedef boost::array<float, 3>  _coordinate_type;
  _coordinate_type coordinate;

   typedef boost::array<int8_t, 4>  _color_type;
  _color_type color;

   typedef boost::array<ros::Time, 2>  _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::flyinglightspeck::Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flyinglightspeck::Header_<ContainerAllocator> const> ConstPtr;

}; // struct Header_

typedef ::flyinglightspeck::Header_<std::allocator<void> > Header;

typedef boost::shared_ptr< ::flyinglightspeck::Header > HeaderPtr;
typedef boost::shared_ptr< ::flyinglightspeck::Header const> HeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flyinglightspeck::Header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flyinglightspeck::Header_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flyinglightspeck::Header_<ContainerAllocator1> & lhs, const ::flyinglightspeck::Header_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.coordinate == rhs.coordinate &&
    lhs.color == rhs.color &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flyinglightspeck::Header_<ContainerAllocator1> & lhs, const ::flyinglightspeck::Header_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flyinglightspeck

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flyinglightspeck::Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flyinglightspeck::Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flyinglightspeck::Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flyinglightspeck::Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flyinglightspeck::Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flyinglightspeck::Header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flyinglightspeck::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66b9cabc2b3d6cb39a39fae4d7d2ae1f";
  }

  static const char* value(const ::flyinglightspeck::Header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66b9cabc2b3d6cb3ULL;
  static const uint64_t static_value2 = 0x9a39fae4d7d2ae1fULL;
};

template<class ContainerAllocator>
struct DataType< ::flyinglightspeck::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flyinglightspeck/Header";
  }

  static const char* value(const ::flyinglightspeck::Header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flyinglightspeck::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Standard metadata for FLS entries\n"
"#ID: identifies a unique FLS\n"
"uint32 id\n"
"#Starting location and color of the FLS\n"
"float32[3] coordinate\n"
"int8[4] color\n"
"#Duration of time for this FLS\n"
"time[2] duration\n"
;
  }

  static const char* value(const ::flyinglightspeck::Header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flyinglightspeck::Header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.coordinate);
      stream.next(m.color);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flyinglightspeck::Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flyinglightspeck::Header_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "coordinate[]" << std::endl;
    for (size_t i = 0; i < v.coordinate.size(); ++i)
    {
      s << indent << "  coordinate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.coordinate[i]);
    }
    s << indent << "color[]" << std::endl;
    for (size_t i = 0; i < v.color.size(); ++i)
    {
      s << indent << "  color[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.color[i]);
    }
    s << indent << "duration[]" << std::endl;
    for (size_t i = 0; i < v.duration.size(); ++i)
    {
      s << indent << "  duration[" << i << "]: ";
      Printer<ros::Time>::stream(s, indent + "  ", v.duration[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLYINGLIGHTSPECK_MESSAGE_HEADER_H
