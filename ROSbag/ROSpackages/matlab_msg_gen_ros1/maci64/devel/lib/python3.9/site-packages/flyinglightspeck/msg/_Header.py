# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from flyinglightspeck/Header.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class Header(genpy.Message):
  _md5sum = "66b9cabc2b3d6cb39a39fae4d7d2ae1f"
  _type = "flyinglightspeck/Header"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Standard metadata for FLS entries
#ID: identifies a unique FLS
uint32 id
#Starting location and color of the FLS
float32[3] coordinate
int8[4] color
#Duration of time for this FLS
time[2] duration
"""
  __slots__ = ['id','coordinate','color','duration']
  _slot_types = ['uint32','float32[3]','int8[4]','time[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,coordinate,color,duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Header, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.coordinate is None:
        self.coordinate = [0.] * 3
      if self.color is None:
        self.color = [0] * 4
      if self.duration is None:
        self.duration = [genpy.Time() for _ in range(2)]
    else:
      self.id = 0
      self.coordinate = [0.] * 3
      self.color = [0] * 4
      self.duration = [genpy.Time() for _ in range(2)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      buff.write(_get_struct_I().pack(_x))
      buff.write(_get_struct_3f().pack(*self.coordinate))
      buff.write(_get_struct_4b().pack(*self.color))
      if len(self.duration) != 2:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (2, len(self.duration), 'self.duration')))
      for val1 in self.duration:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.duration is None:
        self.duration = None
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 12
      self.coordinate = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      self.color = _get_struct_4b().unpack(str[start:end])
      self.duration = []
      for i in range(0, 2):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.duration.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      buff.write(_get_struct_I().pack(_x))
      buff.write(self.coordinate.tostring())
      buff.write(self.color.tostring())
      if len(self.duration) != 2:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (2, len(self.duration), 'self.duration')))
      for val1 in self.duration:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.duration is None:
        self.duration = None
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 12
      self.coordinate = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 4
      self.color = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=4)
      self.duration = []
      for i in range(0, 2):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.duration.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4b = None
def _get_struct_4b():
    global _struct_4b
    if _struct_4b is None:
        _struct_4b = struct.Struct("<4b")
    return _struct_4b
